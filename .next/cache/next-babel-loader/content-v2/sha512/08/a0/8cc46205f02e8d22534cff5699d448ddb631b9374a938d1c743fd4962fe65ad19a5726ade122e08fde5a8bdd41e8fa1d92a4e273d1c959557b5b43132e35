{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/guto/Desktop/JS/gutoamg-next/Videosites/pages/index.js\";\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\nimport Header from '../components/Header.js';\nimport Navbar from '../components/Navbar';\nimport Hi from '../components/Hi.js';\nimport Why from '../components/Why';\nimport Thescript from '../components/Thescript.js';\n\nfunction Home() {\n  // var stripe_load = () => {\n  //     if (typeof window !== 'undefined') {\n  //         var aScript = document.createElement('script');\n  //         aScript.type = 'text/javascript';\n  //         aScript.src = \"../public/dynamic.js\";\n  //         console.log(\"Function running\");\n  //         document.head.appendChild(aScript);\n  //         aScript.onload = () => {\n  //             document.getElementById(\"test\").style.backgroundColor = \"black\";\n  //         };\n  //     }\n  // };\n  // stripe_load();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"body\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"test\",\n        children: \"Not a problem at all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Hi, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Thescript, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n} // // -----        ----   ----   --------       --------       --------         --------   ----   --------   --------       --------\n// //  ----       ----    ----   ----   ----    ----         ----    ----     ----         ----     ----     ----         ----\n// //   ----     ----     ----   ----    ----   --------   ----   --   ----     ----       ----     ----     --------       ----\n// //    ----   ----      ----   ----   ----    ----         ----    ----         ----     ----     ----     ----             ----\n// //     --------        ----   ----------     --------       --------     --------       ----     ----     --------   --------\n// //  This code will be refactored in the future with more readable structure around objects,\n// //  but if you are a fan of deciphering puzzles here it comes:\n// // ------ Functions ------\n// // Returns the relative position of the input range standard thumb\n// const current_thumb_position = (inputRange, newButton) => {\n//     var inputMin = 0;\n//     var inputMax = inputRange.max ? inputRange.max : 1;\n//     var absoluteThumbPosition = inputRange.value;\n//     var relativePosition = Number( ((absoluteThumbPosition - inputMin)*100) / (inputMax - inputMin) );\n//     var roundedPosition = relativePosition.toFixed(4);\n//     return roundedPosition;\n// };\n// // Transforms node list into array with broad support\n// const nodeList_to_array = (nodeList) => {\n//     var array = [];\n//     var i = nodeList.length\n//     // iterate backwards ensuring that length is an UInt32\n//     for (i >>> 0; i--;) { \n//         array[i] = nodeList[i];\n//     }\n//     return array;\n// };\n// // Coloring progress bars between zero and current thumb position\n// // Coloring play/pause button accordingly\n// const coloring_progressBars_playPause = (currentRelativeThumbPosition, progressBars, playButton, pauseButton) => {\n//     const firstProgressBar = progressBars[0].getElementsByClassName(\"variable-progress-bar\")[0];\n//     const secondProgressBar = progressBars[1].getElementsByClassName(\"variable-progress-bar\")[0];\n//     const thirdProgressBar = progressBars[2].getElementsByClassName(\"variable-progress-bar\")[0];\n//     const fourthProgressBar = progressBars[3].getElementsByClassName(\"variable-progress-bar\")[0];\n//     const pageIndex = document.getElementById(\"index\");\n//     if (currentRelativeThumbPosition >= 75.5) {\n//         firstProgressBar.style.width = `100%`;\n//         secondProgressBar.style.width = `100%`;\n//         thirdProgressBar.style.width = `100%`;\n//         fourthProgressBar.style.width = `${ 4*(currentRelativeThumbPosition - 75)}%`;\n//         playButton.style.fill = `rgba(26, 101, 124, 1)`;\n//         pauseButton.style.fill = `rgba(26, 101, 124, 1)`;\n//         pageIndex.innerHTML = `Me`;\n//     } else if (currentRelativeThumbPosition >= 50.5) {\n//         firstProgressBar.style.width = `100%`;\n//         secondProgressBar.style.width = `100%`;\n//         thirdProgressBar.style.width = `${ 4*(currentRelativeThumbPosition - 50)}%`;\n//         fourthProgressBar.style.width = `0`;\n//         playButton.style.fill = `rgba(210, 76, 1, 1)`;\n//         pauseButton.style.fill = `rgba(210, 76, 1, 1)`;\n//         pageIndex.innerHTML = `How`;\n//     } else if (currentRelativeThumbPosition >= 25.5) {\n//         firstProgressBar.style.width = `100%`;\n//         secondProgressBar.style.width = `${ 4*(currentRelativeThumbPosition - 25)}%`;\n//         thirdProgressBar.style.width = `0`;\n//         fourthProgressBar.style.width = `0`;\n//         playButton.style.fill = `rgba(210, 160, 1, 1)`;\n//         pauseButton.style.fill = `rgba(210, 160, 1, 1)`;\n//         pageIndex.innerHTML = `Why`;\n//     } else {\n//         firstProgressBar.style.width = `${4*currentRelativeThumbPosition}%`;\n//         secondProgressBar.style.width = `0`;\n//         thirdProgressBar.style.width = `0`;\n//         fourthProgressBar.style.width = `0`;\n//         playButton.style.fill = `rgba(202, 51, 5, 1)`;\n//         pauseButton.style.fill = `rgba(202, 51, 5, 1)`;\n//         pageIndex.innerHTML = `Hi`;\n//     }\n// };\n// // Alternate play/pause buttons\n// // Changes navBar class\n// // Updates scrolling variable based on thumb position\n// const playPause_clicked = (navBar, boolScroll, playButton, pauseButton, pixelsToScroll) => {\n//     if (playButton.style.display === `inline-block`) {\n//         var absoluteScroll = 0;\n//         playButton.style.display = `none`;\n//         pauseButton.style.display = `inline-block`;\n//         navBar.className = \"navBar hideBar\";\n//         absoluteScroll = relative_to_absolute_position(parseFloat(styledThumb.style.left));\n//         absoluteScroll -= window.innerHeight;\n//         pixelsToScroll.value = absoluteScroll;\n//         scrollPage = true;\n//         playBtnClicked = true;\n//     } else {\n//         pauseButton.style.display = `none`;\n//         playButton.style.display = `inline-block`;\n//         navBar.className = \"navBar\";\n//         scrollPage = false;\n//         playBtnClicked = false;\n//     }\n// };\n// // Positions styled thumb in the same position than the standard thumb\n// // Colors the progresss bars accordingly\n// const rangebar_updates = (thumbPosition) => {\n//     styledThumb.style.left = `calc(${thumbPosition}% + (${1 - thumbPosition * 0.18}px))`;\n//     coloring_progressBars_playPause(thumbPosition, progressBarsArray, playButton, pauseButton);\n// };\n// // Positions styled thumb accordingly\n// // Colors the progresss bars accordingly\n// // If the mouse is moving within the length \n// //  of the rangeBar, it updates thumb \n// //  position, colors the rangeBar and \n// //  scrolls the page proportionally\n// const event_rangebar_updates = (mousePosition) => {\n//     var styledInputLeft, styledInputRight;\n//     var rangebarWidth, styledinputWidth, thumbPos;\n//     var styledInput = document.getElementById(\"styled-input\");\n//     var rangebarLeftX = (document.getElementsByTagName(\"body\")[0].clientWidth - styledInput.clientWidth) / 2;\n//     rangeBarClicked = true;\n//     pageWidth = document.getElementsByTagName(\"body\")[0].clientWidth;\n//     styledinputWidth = styledInput.clientWidth;\n//     styledInputLeft = ((pageWidth - styledinputWidth) / 2);\n//     styledInputRight = (styledInputLeft + styledinputWidth);\n//     thumbPos = (mousePosition - styledInputLeft)*100 / styledinputWidth;\n//     if (mousePosition >= (styledInputLeft - 3) && mousePosition <= (styledInputRight + 5)) {\n//         styledThumb.style.left = mousePosition - styledInputLeft + \"px\";\n//         coloring_progressBars_playPause(thumbPos, progressBarsArray, playButton, pauseButton);\n//         scroll_page_oninput(thumbPos);\n//     } \n// };\n// // Compares the total scrolled height with the sum of section heights of the website, \n// // considering the viewport height. That way it knows in which of the sections\n// // the user is(gets in the first \"if\" in case it is on the fourth section).\n// // Than it subtracts the height of the sections before from the total scrolled\n// // height, resulting in the height of the current section being \n// // displayed/exposed in the screen.\n// // After that, it divides this value by the respective section height to know the \n// // percentage of the section being exposed. This percentage is\n// // precisely how much of the progress bar needs to be filled with\n// // color.\n// // Because each progress bar has 25% width of the range bar,\n// // those values are multiplied and than added to the percentage\n// // of previous progress bars to be totally filled.\n// // The rangebar_updates function is called to make the \n// // changes based on that value.\n// const update_rangebar_onscroll = () => {\n//     var mainContainers = document.getElementsByClassName(\"main-containers\");\n//     var projectsContainerHeight = mainContainers[0].offsetHeight;\n//     var toolsContainerHeight = mainContainers[1].offsetHeight;\n//     var aboutContainerHeight = mainContainers[2].offsetHeight;\n//     var contactContainerHeight = mainContainers[3].offsetHeight;\n//     var windowHeight = window.innerHeight;\n//     var standardThumb = document.getElementById(\"timeline\");\n//     var scrolledHeight = windowHeight + window.pageYOffset;\n//     var styledInput = document.getElementById(\"styled-input\");\n//     var exposedHeight, percentualAppearance;\n//     if (scrolledHeight >= (projectsContainerHeight + toolsContainerHeight + aboutContainerHeight)) {\n//         exposedHeight = scrolledHeight - (projectsContainerHeight + toolsContainerHeight + aboutContainerHeight);\n//         percentualAppearance = exposedHeight/contactContainerHeight;\n//         percentualAppearance = 75 + percentualAppearance*25;\n//     } else if (scrolledHeight >= (projectsContainerHeight + toolsContainerHeight)) {\n//         exposedHeight = scrolledHeight - (projectsContainerHeight + toolsContainerHeight);\n//         percentualAppearance = exposedHeight/aboutContainerHeight;\n//         percentualAppearance = 50 + percentualAppearance*25;\n//     } else if (scrolledHeight >= (projectsContainerHeight)) {\n//         exposedHeight = scrolledHeight - (projectsContainerHeight);\n//         percentualAppearance = exposedHeight/toolsContainerHeight;\n//         percentualAppearance = 25 + percentualAppearance*25;\n//     } else {\n//         exposedHeight = (scrolledHeight - windowHeight);\n//         percentualAppearance = exposedHeight/(projectsContainerHeight - windowHeight);\n//         percentualAppearance = percentualAppearance*25;\n//     }\n//     if (percentualAppearance >= 100)\n//         percentualAppearance = 100;\n//     styledThumb.style.left = `${percentualAppearance}%`;\n//     coloring_progressBars_playPause(percentualAppearance, progressBarsArray, playButton, pauseButton);\n// };\n// // transforms percentual position of the thumb, relative to the\n// // total length of the rangeBar, and transforms it into \n// // pixels from the top of th page until the current position.\n// const relative_to_absolute_position = (relativePosition) => {\n//     var mainContainers = document.getElementsByClassName(\"main-containers\");\n//     var projectsContainerHeight = mainContainers[0].offsetHeight;\n//     var toolsContainerHeight = mainContainers[1].offsetHeight;\n//     var aboutContainerHeight = mainContainers[2].offsetHeight;\n//     var contactContainerHeight = mainContainers[3].offsetHeight;\n//     var incompleteSectionWidth = 0;\n//     var absolutePosition = 0;\n//     relativePosition = parseFloat(relativePosition);\n//     if (relativePosition >= 75) {\n//         incompleteSectionWidth = (relativePosition - 75) / 25;\n//         absolutePosition = projectsContainerHeight + toolsContainerHeight +\n//                         aboutContainerHeight + incompleteSectionWidth*contactContainerHeight;\n//     } else if (relativePosition >= 50) {\n//         incompleteSectionWidth = (relativePosition - 50) / 25;\n//         absolutePosition = projectsContainerHeight + toolsContainerHeight +\n//                         incompleteSectionWidth*aboutContainerHeight;\n//     } else if (relativePosition >= 25) {\n//         incompleteSectionWidth = (relativePosition - 25) / 25;\n//         absolutePosition = projectsContainerHeight + incompleteSectionWidth*toolsContainerHeight;\n//     } else {\n//         incompleteSectionWidth = relativePosition / 25;\n//         absolutePosition = incompleteSectionWidth*(projectsContainerHeight - window.innerHeight) + window.innerHeight;\n//     }\n//     return absolutePosition;\n// };\n// // Scrolls the page when the range thumb is moved\n// // Works with reverse logic of update_rangebar_onscroll\n// // function.\n// const scroll_page_oninput = (thumbPosition) => {\n//     var positionToScroll = 0;\n//     positionToScroll = relative_to_absolute_position(thumbPosition);\n//     positionToScroll -= window.innerHeight;\n//     pixelsToScroll.value = positionToScroll;\n//     window.scroll(0, positionToScroll);\n// };\n// // Receives two values representing the interval in which\n// // the animation must work and the current value between\n// // those, all related to percentage scrolled height\n// // of the page. Also receives the two values representing\n// // the initial and final states(values) desirable for\n// // some animation variable such as opacity and position.\n// // Returns the value of that variable considering the\n// // current position in the interval.\n// const animation_value = (intervalBeg, intervalEnd, currentPos, stateBeg, stateEnd) => {\n//     if (currentPos < intervalBeg)\n//         animationVariable = stateBeg;\n//     else if (currentPos > intervalEnd)\n//         animationVariable = stateEnd;\n//     else {\n//         if (intervalBeg == 0)\n//             intervalBeg = 0.001;\n//         else if (intervalEnd == 0)\n//             intervalEnd = 0.001;\n//         else if (currentPos == 0)\n//             currentPos = 0.001;\n//         else if (stateBeg == 0)\n//             stateBeg = 0.001;\n//         else if (stateEnd == 0)\n//             stateEnd = 0.001;\n//         var changeInState = stateEnd - stateBeg;\n//         var percentageIntervalPos = (intervalEnd / intervalBeg) - 1;\n//         var animationVariable = (stateBeg + ((changeInState / percentageIntervalPos) * ((currentPos / intervalBeg) - 1)));\n//     }\n//     return animationVariable;\n// }; \n// // Variables\n// const rangeTimeline = document.getElementById(\"timeline\");\n// const styledThumb = document.getElementById(\"styled-thumb\");\n// var progressBarsNodeList = document.getElementsByClassName(\"section\");\n// var progressBarsArray = nodeList_to_array(progressBarsNodeList);\n// const playPauseContainer = document.getElementById(\"container-play-pause\");\n// const playButton = document.getElementById(\"playButton\");\n// const pauseButton = document.getElementById(\"pauseButton\");\n// var scrollPage = true;\n// var pixelsToScroll = { value: 5, pixelsToJump: (window.innerHeight / 80) };\n// const loadingPage = document.getElementById(\"loading-page\");\n// var rangeBarClicked = false;\n// var mousePosition;\n// var boolRunScrollFunction = true;\n// const navBar = document.getElementsByClassName(\"navBar\")[0];\n// const rangeBar = document.getElementsByClassName(\"rangeBar\")[0];\n// var autoscrollInnerCounting = 0;\n// var playBtnClicked = true;\n// const windowHeight = window.innerHeight;\n// var changeNavBar = 0;\n// // Set initial play button CSS display rule to `inline-block`\n// // This way, in the function playPause_clicked it is possible\n// // to use playButton.style.display instead of \n// // window.getComputedStyle(element, null).display,\n// // helping on compatibility issues.\n// pauseButton.style.display = `inline-block`;\n// playButton.style.display = `none`;\n// const run_animations = () => {\n//     const mergedFuncNodeList = document.getElementsByClassName(\"merged-functionalities\");\n//     const fixedAnimationsContainer = document.getElementById(\"fixed-animations\");\n//     const mainContainers = document.getElementsByClassName(\"main-containers\");\n//     const videositeAdv = document.getElementById(\"videosite-advantages\");\n//     const fullScreen = document.getElementsByClassName(\"full-screen\")[0];\n//     const theScript = document.getElementsByClassName(\"the-script\")[0];\n//     const itsAFilm = document.getElementsByClassName(\"its-a-film\")[0];\n//     const videositeTitle = document.getElementById(\"videosite-title\");\n//     const videositeAdvNodeList = document.getElementsByTagName(\"h3\");\n//     const fixedPicture = document.getElementById(\"loading-image\");\n//     const questionMark = document.getElementById(\"question-mark\");\n//     const whyTitle = document.getElementById(\"why-title\");\n//     const windowWidth = window.innerWidth;\n//     const HiContainerHeight = mainContainers[0].offsetHeight;\n//     const WhyContainerHeight = mainContainers[1].offsetHeight;\n//     const HowContainerHeight = mainContainers[2].offsetHeight;\n//     const MeContainerHeight = mainContainers[3].offsetHeight;\n//     const totalheight = HiContainerHeight +\n//                         WhyContainerHeight +\n//                         HowContainerHeight +\n//                         MeContainerHeight;\n//     var totalScrolled = window.pageYOffset + window.innerHeight;\n//     var relativeScrolledFirstPage = totalScrolled / HiContainerHeight;\n//     var relativeScrolledSecondPage = (totalScrolled - HiContainerHeight) / WhyContainerHeight;\n//     var relativeScrolledThirdPage = \n//         (totalScrolled - HiContainerHeight - WhyContainerHeight) / HowContainerHeight;\n//     var relativeScrolledFourthPage = \n//         (totalScrolled - HiContainerHeight - WhyContainerHeight - HowContainerHeight) / \n//         MeContainerHeight;\n//     var animationAuxVar;\n//     // // Zoom the initial-image\n//     if (relativeScrolledFirstPage >= 1) {\n//         animationAuxVar = 0.9;\n//     } else if (relativeScrolledFirstPage >= 0.85) {\n//         animationAuxVar = animation_value(0.85, 0.99, relativeScrolledFirstPage, 3, 0.9);\n//         //animationAuxVar = (3 - (3.1*relativeScrolledFirstPage - (2 - relativeScrolledFirstPage*relativeScrolledFirstPage)));\n//     } else {\n//         animationAuxVar = 3;\n//     }\n//     fixedPicture.style.transform = `scale(${animationAuxVar}, ${animationAuxVar})`;\n//     // Videosite title goes away\n//     if (relativeScrolledFirstPage >= 0.55 && relativeScrolledFirstPage <= 0.6) {\n//         videositeTitle.style.display = `inline-block`;\n//         animationAuxVar = animation_value(0.55, 0.6, relativeScrolledFirstPage, 50, -100);\n//         videositeTitle.style.top = `${animationAuxVar}%`;\n//     } else if (relativeScrolledFirstPage < 0.55) {\n//         videositeTitle.style.display = `inline-block`;\n//         videositeTitle.style.top = `50%`;\n//     } else\n//         videositeTitle.style.display = `none`;\n//     // Videosite advantages passing by towards top of page\n//     if (relativeScrolledFirstPage >= 0.6 && relativeScrolledFirstPage <= 0.65) {\n//         videositeAdv.style.display = `block`;\n//         animationAuxVar = animation_value(0.6, 0.65, relativeScrolledFirstPage, 150, 50);\n//         videositeAdv.style.top = `${animationAuxVar}%`;\n//     } else if (relativeScrolledFirstPage < 0.6) {\n//         videositeAdv.style.display = `none`;\n//         videositeAdv.style.top = `150%`;\n//     } else  {\n//         videositeAdv.style.top = `50%`;\n//         videositeAdv.style.display = `block`;\n//     }\n//     if (relativeScrolledFirstPage > 0.95 && relativeScrolledFirstPage <= 0.99) {\n//         videositeAdv.style.display = `block`;\n//         animationAuxVar = animation_value(0.95, 0.99, relativeScrolledFirstPage, 1, 0);\n//         videositeAdv.style.opacity = `${animationAuxVar}`;\n//     } else if (relativeScrolledFirstPage < 0.95)\n//         videositeAdv.style.opacity = `1`;\n//     else\n//         videositeAdv.style.opacity = `0`;\n//     // \"This\" appears\n//     if (relativeScrolledFirstPage >= 0.84)\n//         videositeAdvNodeList[2].innerHTML = `Moreless, this`;\n//     else\n//         videositeAdvNodeList[2].innerHTML = `Moreless,`;\n//     //------ Animations Why page ------\n//     // Displays fixed container\n//     if (relativeScrolledSecondPage >= 0.18)\n//         fixedAnimationsContainer.style.display = `block`;\n//     else if (relativeScrolledSecondPage < 0.18 || relativeScrolledSecondPage > 1)\n//         fixedAnimationsContainer.style.display = `none`;\n//         // \"Why ?\" appearing\n//     if (relativeScrolledSecondPage >= 0.12 && relativeScrolledSecondPage <= 0.17) {\n//         animationAuxVar = animation_value(0.12, 0.17, relativeScrolledSecondPage, 0, 230);\n//         whyTitle.style.width = `${animationAuxVar}px`;\n//         animationAuxVar = animation_value(0.12, 0.17, relativeScrolledSecondPage, 55, 0);\n//         whyTitle.style.left = `${animationAuxVar}%`;\n//         animationAuxVar = animation_value(0.125, 0.17, relativeScrolledSecondPage, 40, 0);\n//         questionMark.style.right = `${animationAuxVar}%`;\n//     } else if (relativeScrolledSecondPage > 0.17) {\n//         whyTitle.style.width = `230px`;\n//         whyTitle.style.left = `0%`;\n//         questionMark.style.right = `0%`;\n//     } else {\n//         whyTitle.style.width = `0px`;\n//         whyTitle.style.left = `55%`;\n//         questionMark.style.right = `40%`;\n//     }\n//     // Changes fixed animations container position\n//     if (relativeScrolledSecondPage >= 0.996) {\n//         fixedAnimationsContainer.style.top = `90%`;\n//         fixedAnimationsContainer.style.position = `absolute`;\n//     } else {\n//         fixedAnimationsContainer.style.top = `50%`;\n//         fixedAnimationsContainer.style.position = `fixed`;\n//     }\n//     // Changes full screen container position\n//     if (relativeScrolledSecondPage >= 0.266 && relativeScrolledSecondPage <= 0.45) {\n//         fullScreen.style.display = `block`;\n//         if (relativeScrolledSecondPage >= 0.41) { // Container goes away\n//             animationAuxVar = animation_value(0.41, 0.45, relativeScrolledSecondPage, 50, -100);\n//             fullScreen.style.left = `${animationAuxVar}%`;\n//         } else { // Container appears\n//             animationAuxVar = animation_value(0.266, 0.32, relativeScrolledSecondPage, 150, 50);\n//             fullScreen.style.left = `${animationAuxVar}%`;\n//         }\n//     } else \n//         fullScreen.style.display = `none`;\n//     // Merged functionalities container animations\n//     if (relativeScrolledSecondPage >= 0.47 && relativeScrolledSecondPage <= 0.72) {\n//         mergedFuncNodeList[0].style.display = `inline-block`;\n//         if (relativeScrolledSecondPage >= 0.695) { // Container goes away\n//             animationAuxVar = animation_value(0.695, 0.72, relativeScrolledSecondPage, 50, -100);\n//             mergedFuncNodeList[0].style.left = `${animationAuxVar}%`;\n//         } else { // Container appears\n//             animationAuxVar = animation_value(0.47, 0.51, relativeScrolledSecondPage, 150, 50);\n//             mergedFuncNodeList[0].style.left = `${animationAuxVar}%`;\n//             // Vertical scrollbar goes down\n//             animationAuxVar = animation_value(0.52, 0.7, relativeScrolledSecondPage, -50, 150);\n//             mergedFuncNodeList[1].style.top = `${animationAuxVar}%`;\n//             // Horizontal scrollbar goes right\n//             animationAuxVar = animation_value(0.52, 0.7, relativeScrolledSecondPage, -50, 150);\n//             mergedFuncNodeList[2].style.left = `${animationAuxVar}%`;\n//         }\n//     } else \n//         mergedFuncNodeList[0].style.display = `none`;\n//     // Changes \"It's a FILM\" container position\n//     if (relativeScrolledSecondPage >= 0.73 && relativeScrolledSecondPage <= 0.9) {\n//         itsAFilm.style.display = `block`;\n//         if (relativeScrolledSecondPage >= 0.88) { // Container goes away\n//             animationAuxVar = animation_value(0.88, 0.9, relativeScrolledSecondPage, 50, -100);\n//             itsAFilm.style.left = `${animationAuxVar}%`;\n//         } else { // Container appears\n//             animationAuxVar = animation_value(0.73, 0.77, relativeScrolledSecondPage, 150, 50);\n//             itsAFilm.style.left = `${animationAuxVar}%`;\n//         }\n//     } else if (relativeScrolledSecondPage > 0.9) {\n//         itsAFilm.style.display = `none`;\n//         itsAFilm.style.left = `-100%`;\n//     } else  \n//         itsAFilm.style.display = `none`;\n//     // Changes \"Btw, here's the script\" container position\n//     if (relativeScrolledSecondPage >= 0.9 && relativeScrolledSecondPage <= 0.95) {\n//         theScript.style.display = `block`;\n//         theScript.style.backgroundColor = `rgba(255, 255, 255, 0)`;\n//         // Container appears\n//         animationAuxVar = animation_value(0.9, 0.95, relativeScrolledSecondPage, 150, 50);\n//         theScript.style.left = `${animationAuxVar}%`;\n//     } else if (relativeScrolledSecondPage < 0.9) {\n//         theScript.style.display = `none`;\n//         theScript.style.backgroundColor = `rgba(255, 255, 255, 0)`;\n//     } else {\n//         theScript.style.display = `block`;\n//         theScript.style.left = `50%`;\n//         animationAuxVar = animation_value(0.95, 0.99, relativeScrolledSecondPage, 0, 0.3);\n//         theScript.style.backgroundColor = `rgba(255, 255, 255, ${animationAuxVar})`;\n//     }\n// };\n// // Setting scroll events:\n// // - On scroll animations\n// // - Progress bar coloring\n// document.addEventListener(\"scroll\", () => {\n//     update_rangebar_onscroll();\n// });\n// // Auto scroll page\n// // Hide navBar after 3 seconds without \n// //  mouse movement or navBar activity\n// const autoScroll = () => {\n//     autoscrollInnerCounting++;\n//     if (changeNavBar === 1)\n//         navBar.className = \"navBar\";\n//     else if (changeNavBar === 2)\n//         navBar.className = \"navBar appearBar\";\n//     else if (changeNavBar === 3)\n//         navBar.className = \"navBar hideBar\";\n//     if (scrollPage) {\n//         window.scroll(0, pixelsToScroll.value);\n//         pixelsToScroll.value = window.pageYOffset + pixelsToScroll.pixelsToJump;\n//     }\n//     if (!playBtnClicked) {\n//         autoscrollInnerCounting = 0;\n//     }\n//     if(autoscrollInnerCounting == 40) {\n//         autoscrollInnerCounting = 0;\n//         navBar.className = \"navBar hideBar\";\n//     }\n//     run_animations();\n// };\n// setInterval(autoScroll, 50);\n// // Functionalities of the play/pause button\n// playPauseContainer.addEventListener(\"click\", () => {\n//     playPause_clicked(navBar, scrollPage, playButton, pauseButton, pixelsToScroll);\n// }, false);\n// // Unables the rangeBar updates if the mouse\n// //  is no longer clicking or holding click\n// document.addEventListener(\"mouseup\", () => {\n//     rangeBarClicked = false;\n// }, false);\n// // Updates the rangeBar thumb position and coloring\n// //  if there is a mouse click and hold inside\n// //  the rangeBar area  \n// rangeBar.addEventListener(\"mousedown\", (e) => {\n//     e.preventDefault();\n//     mousePosition = e.clientX;\n//     event_rangebar_updates(mousePosition);\n// }, false);\n// // If it is not a touch screen device,\n// //  when there is mouse movement inside\n// //  the navBar area it avoids the bar\n// //  to disappear\n// navBar.addEventListener(\"mousemove\", (e) => {\n//     e.preventDefault();\n//     if(!(window.matchMedia(\"(pointer: coarse)\").matches)) {\n//         if (rangeBarClicked) {\n//             mousePosition = e.clientX;\n//             event_rangebar_updates(mousePosition);\n//             changeNavBar = 1;\n//             autoscrollInnerCounting = 0;\n//         }\n//     }\n// }, false);\n// rangeBar.addEventListener(\"touchmove\", (e) => {\n//     e.preventDefault();\n//     rangeBarClicked = true;\n//     mousePosition = e.touches[0].clientX;\n//     if (rangeBarClicked) {\n//         event_rangebar_updates(mousePosition);\n//     }\n//     changeNavBar = 1;\n//     autoscrollInnerCounting = 0;\n// }, false);\n// // For touch screens, on movement stop the scroll and change playPause button\n// var lastTopPos = 0;\n// document.getElementsByTagName(\"body\")[0].addEventListener(\"touchmove\", (e) => {\n//     playButton.style.display = `inline-block`;\n//     pauseButton.style.display = 'none';\n//     scrollPage = false;\n//     playBtnClicked = false;\n//     changeNavBar = 1;\n// }, false);\n// // For mouse based screens, on movement stop the scroll and change playPause button\n// document.getElementsByTagName(\"body\")[0].addEventListener(\"wheel\", (e) => {\n//     pauseButton.style.display = 'none';\n//     playButton.style.display = `inline-block`;\n//     scrollPage = false;\n//     playBtnClicked = false;\n//     changeNavBar = 1;\n//     //playPause_clicked(navBar, scrollPage, playButton, pauseButton, pixelsToScroll);\n// }, false);\n// // For touch screens, on screen touch makes navBar appear\n// document.getElementsByTagName(\"body\")[0].addEventListener(\"touchstart\", (e) => {\n//     if (navBar.className === \"navBar\") {\n//         changeNavBar = 0;\n//         playBtnClicked = false;    \n//     }\n//     else {\n//         changeNavBar = 1;\n//         playBtnClicked = false;\n//     }\n// }, false);\n// // For mouse based screens, on mouse move makes navBar appear\n// document.getElementsByTagName(\"body\")[0].addEventListener(\"mousemove\", (e) => {\n//     e.preventDefault();\n//     if (navBar.className === \"navBar\") {\n//         changeNavBar = 0;\n//         autoscrollInnerCounting = 0;\n//     }\n//     else {\n//         changeNavBar = 1;\n//         autoscrollInnerCounting = 0;\n//     }\n// }, false);\n// // On page reload goes to beginning\n// // window.addEventListener(\"beforeunload\", (e) => {\n// //     e.preventDefault();\n// //     window.scroll(0, 0);\n// //     styledThumb.style.left = `0%`;\n// //     event_rangebar_updates(0);\n// // }, false);\n\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/guto/Desktop/JS/gutoamg-next/Videosites/pages/index.js"],"names":["Document","Html","Head","Main","NextScript","Header","Navbar","Hi","Why","Thescript","Home"],"mappings":";;AAAA,OAAOA,QAAP,IAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,UAArC,QAAuD,eAAvD;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,EAAP,MAAe,qBAAf;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAMA,SAASC,IAAT,GAAgB;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,EAAD;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAsBI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH,C,CAYD;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAvqBSA,I;AAirBT,eAAeA,IAAf","sourcesContent":["import Document, { Html, Head, Main, NextScript } from 'next/document';\nimport Header from '../components/Header.js';\nimport Navbar from '../components/Navbar';\nimport Hi from '../components/Hi.js';\nimport Why from '../components/Why';\nimport Thescript from '../components/Thescript.js';\n\n\n\n\n\nfunction Home() {\n\n    // var stripe_load = () => {\n    //     if (typeof window !== 'undefined') {\n    //         var aScript = document.createElement('script');\n    //         aScript.type = 'text/javascript';\n    //         aScript.src = \"../public/dynamic.js\";\n    //         console.log(\"Function running\");\n    //         document.head.appendChild(aScript);\n    //         aScript.onload = () => {\n    //             document.getElementById(\"test\").style.backgroundColor = \"black\";\n    //         };\n    //     }\n    // };\n    // stripe_load();\n\n    \n    \n    return(\n        <div>\n            <Header/>\n\n            {/* <Head>\n            <script src=\"../dynamic.js\"></script>\n            </Head> */}\n\n            <body>\n                <Navbar/>\n                <div id=\"test\">Not a problem at all</div>\n                <Hi/>\n\n                {/* <script type=\"module\">\n                    import * as dynFile from\n                    \n                    document.getElementById(\"test\").backgroundColor = `black`;\n                </script> */}\n                \n            </body>\n\n            \n            \n            <Thescript />\n        </div>\n    );\n}\n\n\n\n\n\n\n\n\n\n\n\n// // -----        ----   ----   --------       --------       --------         --------   ----   --------   --------       --------\n// //  ----       ----    ----   ----   ----    ----         ----    ----     ----         ----     ----     ----         ----\n// //   ----     ----     ----   ----    ----   --------   ----   --   ----     ----       ----     ----     --------       ----\n// //    ----   ----      ----   ----   ----    ----         ----    ----         ----     ----     ----     ----             ----\n// //     --------        ----   ----------     --------       --------     --------       ----     ----     --------   --------\n\n// //  This code will be refactored in the future with more readable structure around objects,\n// //  but if you are a fan of deciphering puzzles here it comes:\n\n// // ------ Functions ------\n\n// // Returns the relative position of the input range standard thumb\n// const current_thumb_position = (inputRange, newButton) => {\n//     var inputMin = 0;\n//     var inputMax = inputRange.max ? inputRange.max : 1;\n//     var absoluteThumbPosition = inputRange.value;\n//     var relativePosition = Number( ((absoluteThumbPosition - inputMin)*100) / (inputMax - inputMin) );\n//     var roundedPosition = relativePosition.toFixed(4);\n\n//     return roundedPosition;\n// };\n\n// // Transforms node list into array with broad support\n// const nodeList_to_array = (nodeList) => {\n//     var array = [];\n//     var i = nodeList.length\n//     // iterate backwards ensuring that length is an UInt32\n//     for (i >>> 0; i--;) { \n//         array[i] = nodeList[i];\n//     }\n//     return array;\n// };\n\n// // Coloring progress bars between zero and current thumb position\n// // Coloring play/pause button accordingly\n// const coloring_progressBars_playPause = (currentRelativeThumbPosition, progressBars, playButton, pauseButton) => {\n//     const firstProgressBar = progressBars[0].getElementsByClassName(\"variable-progress-bar\")[0];\n//     const secondProgressBar = progressBars[1].getElementsByClassName(\"variable-progress-bar\")[0];\n//     const thirdProgressBar = progressBars[2].getElementsByClassName(\"variable-progress-bar\")[0];\n//     const fourthProgressBar = progressBars[3].getElementsByClassName(\"variable-progress-bar\")[0];\n//     const pageIndex = document.getElementById(\"index\");\n  \n//     if (currentRelativeThumbPosition >= 75.5) {\n//         firstProgressBar.style.width = `100%`;\n//         secondProgressBar.style.width = `100%`;\n//         thirdProgressBar.style.width = `100%`;\n//         fourthProgressBar.style.width = `${ 4*(currentRelativeThumbPosition - 75)}%`;\n\n//         playButton.style.fill = `rgba(26, 101, 124, 1)`;\n//         pauseButton.style.fill = `rgba(26, 101, 124, 1)`;\n\n//         pageIndex.innerHTML = `Me`;\n//     } else if (currentRelativeThumbPosition >= 50.5) {\n//         firstProgressBar.style.width = `100%`;\n//         secondProgressBar.style.width = `100%`;\n//         thirdProgressBar.style.width = `${ 4*(currentRelativeThumbPosition - 50)}%`;\n//         fourthProgressBar.style.width = `0`;\n\n//         playButton.style.fill = `rgba(210, 76, 1, 1)`;\n//         pauseButton.style.fill = `rgba(210, 76, 1, 1)`;\n\n//         pageIndex.innerHTML = `How`;\n//     } else if (currentRelativeThumbPosition >= 25.5) {\n//         firstProgressBar.style.width = `100%`;\n//         secondProgressBar.style.width = `${ 4*(currentRelativeThumbPosition - 25)}%`;\n//         thirdProgressBar.style.width = `0`;\n//         fourthProgressBar.style.width = `0`;\n\n//         playButton.style.fill = `rgba(210, 160, 1, 1)`;\n//         pauseButton.style.fill = `rgba(210, 160, 1, 1)`;\n\n//         pageIndex.innerHTML = `Why`;\n//     } else {\n//         firstProgressBar.style.width = `${4*currentRelativeThumbPosition}%`;\n//         secondProgressBar.style.width = `0`;\n//         thirdProgressBar.style.width = `0`;\n//         fourthProgressBar.style.width = `0`;\n\n//         playButton.style.fill = `rgba(202, 51, 5, 1)`;\n//         pauseButton.style.fill = `rgba(202, 51, 5, 1)`;\n\n//         pageIndex.innerHTML = `Hi`;\n//     }\n// };\n\n// // Alternate play/pause buttons\n// // Changes navBar class\n// // Updates scrolling variable based on thumb position\n// const playPause_clicked = (navBar, boolScroll, playButton, pauseButton, pixelsToScroll) => {\n//     if (playButton.style.display === `inline-block`) {\n//         var absoluteScroll = 0;\n//         playButton.style.display = `none`;\n//         pauseButton.style.display = `inline-block`;\n//         navBar.className = \"navBar hideBar\";\n//         absoluteScroll = relative_to_absolute_position(parseFloat(styledThumb.style.left));\n//         absoluteScroll -= window.innerHeight;\n//         pixelsToScroll.value = absoluteScroll;\n//         scrollPage = true;\n//         playBtnClicked = true;\n//     } else {\n//         pauseButton.style.display = `none`;\n//         playButton.style.display = `inline-block`;\n//         navBar.className = \"navBar\";\n//         scrollPage = false;\n//         playBtnClicked = false;\n//     }\n// };\n\n// // Positions styled thumb in the same position than the standard thumb\n// // Colors the progresss bars accordingly\n// const rangebar_updates = (thumbPosition) => {\n//     styledThumb.style.left = `calc(${thumbPosition}% + (${1 - thumbPosition * 0.18}px))`;\n//     coloring_progressBars_playPause(thumbPosition, progressBarsArray, playButton, pauseButton);\n// };\n\n// // Positions styled thumb accordingly\n// // Colors the progresss bars accordingly\n// // If the mouse is moving within the length \n// //  of the rangeBar, it updates thumb \n// //  position, colors the rangeBar and \n// //  scrolls the page proportionally\n// const event_rangebar_updates = (mousePosition) => {\n//     var styledInputLeft, styledInputRight;\n//     var rangebarWidth, styledinputWidth, thumbPos;\n//     var styledInput = document.getElementById(\"styled-input\");\n//     var rangebarLeftX = (document.getElementsByTagName(\"body\")[0].clientWidth - styledInput.clientWidth) / 2;\n\n//     rangeBarClicked = true;\n//     pageWidth = document.getElementsByTagName(\"body\")[0].clientWidth;\n//     styledinputWidth = styledInput.clientWidth;\n//     styledInputLeft = ((pageWidth - styledinputWidth) / 2);\n//     styledInputRight = (styledInputLeft + styledinputWidth);\n//     thumbPos = (mousePosition - styledInputLeft)*100 / styledinputWidth;\n    \n//     if (mousePosition >= (styledInputLeft - 3) && mousePosition <= (styledInputRight + 5)) {\n//         styledThumb.style.left = mousePosition - styledInputLeft + \"px\";\n//         coloring_progressBars_playPause(thumbPos, progressBarsArray, playButton, pauseButton);\n//         scroll_page_oninput(thumbPos);\n//     } \n// };\n\n// // Compares the total scrolled height with the sum of section heights of the website, \n// // considering the viewport height. That way it knows in which of the sections\n// // the user is(gets in the first \"if\" in case it is on the fourth section).\n// // Than it subtracts the height of the sections before from the total scrolled\n// // height, resulting in the height of the current section being \n// // displayed/exposed in the screen.\n// // After that, it divides this value by the respective section height to know the \n// // percentage of the section being exposed. This percentage is\n// // precisely how much of the progress bar needs to be filled with\n// // color.\n// // Because each progress bar has 25% width of the range bar,\n// // those values are multiplied and than added to the percentage\n// // of previous progress bars to be totally filled.\n// // The rangebar_updates function is called to make the \n// // changes based on that value.\n// const update_rangebar_onscroll = () => {\n//     var mainContainers = document.getElementsByClassName(\"main-containers\");\n//     var projectsContainerHeight = mainContainers[0].offsetHeight;\n//     var toolsContainerHeight = mainContainers[1].offsetHeight;\n//     var aboutContainerHeight = mainContainers[2].offsetHeight;\n//     var contactContainerHeight = mainContainers[3].offsetHeight;\n    \n//     var windowHeight = window.innerHeight;\n//     var standardThumb = document.getElementById(\"timeline\");\n//     var scrolledHeight = windowHeight + window.pageYOffset;\n//     var styledInput = document.getElementById(\"styled-input\");\n//     var exposedHeight, percentualAppearance;\n\n//     if (scrolledHeight >= (projectsContainerHeight + toolsContainerHeight + aboutContainerHeight)) {\n//         exposedHeight = scrolledHeight - (projectsContainerHeight + toolsContainerHeight + aboutContainerHeight);\n//         percentualAppearance = exposedHeight/contactContainerHeight;\n//         percentualAppearance = 75 + percentualAppearance*25;\n//     } else if (scrolledHeight >= (projectsContainerHeight + toolsContainerHeight)) {\n//         exposedHeight = scrolledHeight - (projectsContainerHeight + toolsContainerHeight);\n//         percentualAppearance = exposedHeight/aboutContainerHeight;\n//         percentualAppearance = 50 + percentualAppearance*25;\n//     } else if (scrolledHeight >= (projectsContainerHeight)) {\n//         exposedHeight = scrolledHeight - (projectsContainerHeight);\n//         percentualAppearance = exposedHeight/toolsContainerHeight;\n//         percentualAppearance = 25 + percentualAppearance*25;\n//     } else {\n//         exposedHeight = (scrolledHeight - windowHeight);\n//         percentualAppearance = exposedHeight/(projectsContainerHeight - windowHeight);\n//         percentualAppearance = percentualAppearance*25;\n//     }\n//     if (percentualAppearance >= 100)\n//         percentualAppearance = 100;\n//     styledThumb.style.left = `${percentualAppearance}%`;\n//     coloring_progressBars_playPause(percentualAppearance, progressBarsArray, playButton, pauseButton);\n// };\n\n// // transforms percentual position of the thumb, relative to the\n// // total length of the rangeBar, and transforms it into \n// // pixels from the top of th page until the current position.\n// const relative_to_absolute_position = (relativePosition) => {\n//     var mainContainers = document.getElementsByClassName(\"main-containers\");\n//     var projectsContainerHeight = mainContainers[0].offsetHeight;\n//     var toolsContainerHeight = mainContainers[1].offsetHeight;\n//     var aboutContainerHeight = mainContainers[2].offsetHeight;\n//     var contactContainerHeight = mainContainers[3].offsetHeight;\n//     var incompleteSectionWidth = 0;\n//     var absolutePosition = 0;\n//     relativePosition = parseFloat(relativePosition);\n\n//     if (relativePosition >= 75) {\n//         incompleteSectionWidth = (relativePosition - 75) / 25;\n//         absolutePosition = projectsContainerHeight + toolsContainerHeight +\n//                         aboutContainerHeight + incompleteSectionWidth*contactContainerHeight;\n//     } else if (relativePosition >= 50) {\n//         incompleteSectionWidth = (relativePosition - 50) / 25;\n//         absolutePosition = projectsContainerHeight + toolsContainerHeight +\n//                         incompleteSectionWidth*aboutContainerHeight;\n//     } else if (relativePosition >= 25) {\n//         incompleteSectionWidth = (relativePosition - 25) / 25;\n//         absolutePosition = projectsContainerHeight + incompleteSectionWidth*toolsContainerHeight;\n//     } else {\n//         incompleteSectionWidth = relativePosition / 25;\n//         absolutePosition = incompleteSectionWidth*(projectsContainerHeight - window.innerHeight) + window.innerHeight;\n//     }\n\n//     return absolutePosition;\n// };\n\n// // Scrolls the page when the range thumb is moved\n// // Works with reverse logic of update_rangebar_onscroll\n// // function.\n// const scroll_page_oninput = (thumbPosition) => {\n//     var positionToScroll = 0;\n//     positionToScroll = relative_to_absolute_position(thumbPosition);\n//     positionToScroll -= window.innerHeight;\n//     pixelsToScroll.value = positionToScroll;\n//     window.scroll(0, positionToScroll);\n// };\n\n// // Receives two values representing the interval in which\n// // the animation must work and the current value between\n// // those, all related to percentage scrolled height\n// // of the page. Also receives the two values representing\n// // the initial and final states(values) desirable for\n// // some animation variable such as opacity and position.\n// // Returns the value of that variable considering the\n// // current position in the interval.\n// const animation_value = (intervalBeg, intervalEnd, currentPos, stateBeg, stateEnd) => {\n//     if (currentPos < intervalBeg)\n//         animationVariable = stateBeg;\n//     else if (currentPos > intervalEnd)\n//         animationVariable = stateEnd;\n//     else {\n//         if (intervalBeg == 0)\n//             intervalBeg = 0.001;\n//         else if (intervalEnd == 0)\n//             intervalEnd = 0.001;\n//         else if (currentPos == 0)\n//             currentPos = 0.001;\n//         else if (stateBeg == 0)\n//             stateBeg = 0.001;\n//         else if (stateEnd == 0)\n//             stateEnd = 0.001;\n//         var changeInState = stateEnd - stateBeg;\n//         var percentageIntervalPos = (intervalEnd / intervalBeg) - 1;\n//         var animationVariable = (stateBeg + ((changeInState / percentageIntervalPos) * ((currentPos / intervalBeg) - 1)));\n//     }\n\n//     return animationVariable;\n// }; \n\n// // Variables\n// const rangeTimeline = document.getElementById(\"timeline\");\n// const styledThumb = document.getElementById(\"styled-thumb\");\n\n// var progressBarsNodeList = document.getElementsByClassName(\"section\");\n// var progressBarsArray = nodeList_to_array(progressBarsNodeList);\n\n// const playPauseContainer = document.getElementById(\"container-play-pause\");\n// const playButton = document.getElementById(\"playButton\");\n// const pauseButton = document.getElementById(\"pauseButton\");\n\n// var scrollPage = true;\n// var pixelsToScroll = { value: 5, pixelsToJump: (window.innerHeight / 80) };\n// const loadingPage = document.getElementById(\"loading-page\");\n\n// var rangeBarClicked = false;\n// var mousePosition;\n// var boolRunScrollFunction = true;\n// const navBar = document.getElementsByClassName(\"navBar\")[0];\n// const rangeBar = document.getElementsByClassName(\"rangeBar\")[0];\n// var autoscrollInnerCounting = 0;\n// var playBtnClicked = true;\n// const windowHeight = window.innerHeight;\n// var changeNavBar = 0;\n\n// // Set initial play button CSS display rule to `inline-block`\n// // This way, in the function playPause_clicked it is possible\n// // to use playButton.style.display instead of \n// // window.getComputedStyle(element, null).display,\n// // helping on compatibility issues.\n// pauseButton.style.display = `inline-block`;\n// playButton.style.display = `none`;\n\n\n// const run_animations = () => {\n//     const mergedFuncNodeList = document.getElementsByClassName(\"merged-functionalities\");\n//     const fixedAnimationsContainer = document.getElementById(\"fixed-animations\");\n//     const mainContainers = document.getElementsByClassName(\"main-containers\");\n//     const videositeAdv = document.getElementById(\"videosite-advantages\");\n//     const fullScreen = document.getElementsByClassName(\"full-screen\")[0];\n//     const theScript = document.getElementsByClassName(\"the-script\")[0];\n//     const itsAFilm = document.getElementsByClassName(\"its-a-film\")[0];\n//     const videositeTitle = document.getElementById(\"videosite-title\");\n//     const videositeAdvNodeList = document.getElementsByTagName(\"h3\");\n//     const fixedPicture = document.getElementById(\"loading-image\");\n//     const questionMark = document.getElementById(\"question-mark\");\n//     const whyTitle = document.getElementById(\"why-title\");\n//     const windowWidth = window.innerWidth;\n\n//     const HiContainerHeight = mainContainers[0].offsetHeight;\n//     const WhyContainerHeight = mainContainers[1].offsetHeight;\n//     const HowContainerHeight = mainContainers[2].offsetHeight;\n//     const MeContainerHeight = mainContainers[3].offsetHeight;\n//     const totalheight = HiContainerHeight +\n//                         WhyContainerHeight +\n//                         HowContainerHeight +\n//                         MeContainerHeight;\n\n//     var totalScrolled = window.pageYOffset + window.innerHeight;\n//     var relativeScrolledFirstPage = totalScrolled / HiContainerHeight;\n//     var relativeScrolledSecondPage = (totalScrolled - HiContainerHeight) / WhyContainerHeight;\n//     var relativeScrolledThirdPage = \n//         (totalScrolled - HiContainerHeight - WhyContainerHeight) / HowContainerHeight;\n//     var relativeScrolledFourthPage = \n//         (totalScrolled - HiContainerHeight - WhyContainerHeight - HowContainerHeight) / \n//         MeContainerHeight;\n//     var animationAuxVar;\n    \n//     // // Zoom the initial-image\n//     if (relativeScrolledFirstPage >= 1) {\n//         animationAuxVar = 0.9;\n//     } else if (relativeScrolledFirstPage >= 0.85) {\n//         animationAuxVar = animation_value(0.85, 0.99, relativeScrolledFirstPage, 3, 0.9);\n//         //animationAuxVar = (3 - (3.1*relativeScrolledFirstPage - (2 - relativeScrolledFirstPage*relativeScrolledFirstPage)));\n//     } else {\n//         animationAuxVar = 3;\n//     }\n//     fixedPicture.style.transform = `scale(${animationAuxVar}, ${animationAuxVar})`;\n\n//     // Videosite title goes away\n//     if (relativeScrolledFirstPage >= 0.55 && relativeScrolledFirstPage <= 0.6) {\n//         videositeTitle.style.display = `inline-block`;\n//         animationAuxVar = animation_value(0.55, 0.6, relativeScrolledFirstPage, 50, -100);\n//         videositeTitle.style.top = `${animationAuxVar}%`;\n//     } else if (relativeScrolledFirstPage < 0.55) {\n//         videositeTitle.style.display = `inline-block`;\n//         videositeTitle.style.top = `50%`;\n//     } else\n//         videositeTitle.style.display = `none`;\n\n//     // Videosite advantages passing by towards top of page\n//     if (relativeScrolledFirstPage >= 0.6 && relativeScrolledFirstPage <= 0.65) {\n//         videositeAdv.style.display = `block`;\n//         animationAuxVar = animation_value(0.6, 0.65, relativeScrolledFirstPage, 150, 50);\n//         videositeAdv.style.top = `${animationAuxVar}%`;\n//     } else if (relativeScrolledFirstPage < 0.6) {\n//         videositeAdv.style.display = `none`;\n//         videositeAdv.style.top = `150%`;\n//     } else  {\n//         videositeAdv.style.top = `50%`;\n//         videositeAdv.style.display = `block`;\n//     }\n//     if (relativeScrolledFirstPage > 0.95 && relativeScrolledFirstPage <= 0.99) {\n//         videositeAdv.style.display = `block`;\n//         animationAuxVar = animation_value(0.95, 0.99, relativeScrolledFirstPage, 1, 0);\n//         videositeAdv.style.opacity = `${animationAuxVar}`;\n//     } else if (relativeScrolledFirstPage < 0.95)\n//         videositeAdv.style.opacity = `1`;\n//     else\n//         videositeAdv.style.opacity = `0`;\n\n//     // \"This\" appears\n//     if (relativeScrolledFirstPage >= 0.84)\n//         videositeAdvNodeList[2].innerHTML = `Moreless, this`;\n//     else\n//         videositeAdvNodeList[2].innerHTML = `Moreless,`;\n\n\n//     //------ Animations Why page ------\n//     // Displays fixed container\n//     if (relativeScrolledSecondPage >= 0.18)\n//         fixedAnimationsContainer.style.display = `block`;\n//     else if (relativeScrolledSecondPage < 0.18 || relativeScrolledSecondPage > 1)\n//         fixedAnimationsContainer.style.display = `none`;\n    \n//         // \"Why ?\" appearing\n//     if (relativeScrolledSecondPage >= 0.12 && relativeScrolledSecondPage <= 0.17) {\n//         animationAuxVar = animation_value(0.12, 0.17, relativeScrolledSecondPage, 0, 230);\n//         whyTitle.style.width = `${animationAuxVar}px`;\n        \n//         animationAuxVar = animation_value(0.12, 0.17, relativeScrolledSecondPage, 55, 0);\n//         whyTitle.style.left = `${animationAuxVar}%`;\n        \n//         animationAuxVar = animation_value(0.125, 0.17, relativeScrolledSecondPage, 40, 0);\n//         questionMark.style.right = `${animationAuxVar}%`;\n//     } else if (relativeScrolledSecondPage > 0.17) {\n//         whyTitle.style.width = `230px`;\n//         whyTitle.style.left = `0%`;\n//         questionMark.style.right = `0%`;\n//     } else {\n//         whyTitle.style.width = `0px`;\n//         whyTitle.style.left = `55%`;\n//         questionMark.style.right = `40%`;\n//     }\n\n//     // Changes fixed animations container position\n//     if (relativeScrolledSecondPage >= 0.996) {\n//         fixedAnimationsContainer.style.top = `90%`;\n//         fixedAnimationsContainer.style.position = `absolute`;\n//     } else {\n//         fixedAnimationsContainer.style.top = `50%`;\n//         fixedAnimationsContainer.style.position = `fixed`;\n//     }\n\n//     // Changes full screen container position\n//     if (relativeScrolledSecondPage >= 0.266 && relativeScrolledSecondPage <= 0.45) {\n//         fullScreen.style.display = `block`;\n//         if (relativeScrolledSecondPage >= 0.41) { // Container goes away\n//             animationAuxVar = animation_value(0.41, 0.45, relativeScrolledSecondPage, 50, -100);\n//             fullScreen.style.left = `${animationAuxVar}%`;\n//         } else { // Container appears\n//             animationAuxVar = animation_value(0.266, 0.32, relativeScrolledSecondPage, 150, 50);\n//             fullScreen.style.left = `${animationAuxVar}%`;\n//         }\n//     } else \n//         fullScreen.style.display = `none`;\n\n//     // Merged functionalities container animations\n//     if (relativeScrolledSecondPage >= 0.47 && relativeScrolledSecondPage <= 0.72) {\n//         mergedFuncNodeList[0].style.display = `inline-block`;\n        \n//         if (relativeScrolledSecondPage >= 0.695) { // Container goes away\n//             animationAuxVar = animation_value(0.695, 0.72, relativeScrolledSecondPage, 50, -100);\n//             mergedFuncNodeList[0].style.left = `${animationAuxVar}%`;\n//         } else { // Container appears\n//             animationAuxVar = animation_value(0.47, 0.51, relativeScrolledSecondPage, 150, 50);\n//             mergedFuncNodeList[0].style.left = `${animationAuxVar}%`;\n//             // Vertical scrollbar goes down\n//             animationAuxVar = animation_value(0.52, 0.7, relativeScrolledSecondPage, -50, 150);\n//             mergedFuncNodeList[1].style.top = `${animationAuxVar}%`;\n//             // Horizontal scrollbar goes right\n//             animationAuxVar = animation_value(0.52, 0.7, relativeScrolledSecondPage, -50, 150);\n//             mergedFuncNodeList[2].style.left = `${animationAuxVar}%`;\n//         }\n//     } else \n//         mergedFuncNodeList[0].style.display = `none`;\n\n//     // Changes \"It's a FILM\" container position\n//     if (relativeScrolledSecondPage >= 0.73 && relativeScrolledSecondPage <= 0.9) {\n//         itsAFilm.style.display = `block`;\n//         if (relativeScrolledSecondPage >= 0.88) { // Container goes away\n//             animationAuxVar = animation_value(0.88, 0.9, relativeScrolledSecondPage, 50, -100);\n//             itsAFilm.style.left = `${animationAuxVar}%`;\n//         } else { // Container appears\n//             animationAuxVar = animation_value(0.73, 0.77, relativeScrolledSecondPage, 150, 50);\n//             itsAFilm.style.left = `${animationAuxVar}%`;\n//         }\n//     } else if (relativeScrolledSecondPage > 0.9) {\n//         itsAFilm.style.display = `none`;\n//         itsAFilm.style.left = `-100%`;\n//     } else  \n//         itsAFilm.style.display = `none`;\n\n//     // Changes \"Btw, here's the script\" container position\n//     if (relativeScrolledSecondPage >= 0.9 && relativeScrolledSecondPage <= 0.95) {\n//         theScript.style.display = `block`;\n//         theScript.style.backgroundColor = `rgba(255, 255, 255, 0)`;\n//         // Container appears\n//         animationAuxVar = animation_value(0.9, 0.95, relativeScrolledSecondPage, 150, 50);\n//         theScript.style.left = `${animationAuxVar}%`;\n//     } else if (relativeScrolledSecondPage < 0.9) {\n//         theScript.style.display = `none`;\n//         theScript.style.backgroundColor = `rgba(255, 255, 255, 0)`;\n//     } else {\n//         theScript.style.display = `block`;\n//         theScript.style.left = `50%`;\n//         animationAuxVar = animation_value(0.95, 0.99, relativeScrolledSecondPage, 0, 0.3);\n//         theScript.style.backgroundColor = `rgba(255, 255, 255, ${animationAuxVar})`;\n//     }\n// };\n\n\n// // Setting scroll events:\n// // - On scroll animations\n// // - Progress bar coloring\n// document.addEventListener(\"scroll\", () => {\n//     update_rangebar_onscroll();\n// });\n\n// // Auto scroll page\n// // Hide navBar after 3 seconds without \n// //  mouse movement or navBar activity\n// const autoScroll = () => {\n//     autoscrollInnerCounting++;\n//     if (changeNavBar === 1)\n//         navBar.className = \"navBar\";\n//     else if (changeNavBar === 2)\n//         navBar.className = \"navBar appearBar\";\n//     else if (changeNavBar === 3)\n//         navBar.className = \"navBar hideBar\";\n\n//     if (scrollPage) {\n//         window.scroll(0, pixelsToScroll.value);\n//         pixelsToScroll.value = window.pageYOffset + pixelsToScroll.pixelsToJump;\n//     }\n//     if (!playBtnClicked) {\n//         autoscrollInnerCounting = 0;\n//     }\n//     if(autoscrollInnerCounting == 40) {\n//         autoscrollInnerCounting = 0;\n//         navBar.className = \"navBar hideBar\";\n//     }\n\n//     run_animations();\n// };\n// setInterval(autoScroll, 50);\n\n// // Functionalities of the play/pause button\n// playPauseContainer.addEventListener(\"click\", () => {\n//     playPause_clicked(navBar, scrollPage, playButton, pauseButton, pixelsToScroll);\n// }, false);\n\n// // Unables the rangeBar updates if the mouse\n// //  is no longer clicking or holding click\n// document.addEventListener(\"mouseup\", () => {\n//     rangeBarClicked = false;\n// }, false);\n\n// // Updates the rangeBar thumb position and coloring\n// //  if there is a mouse click and hold inside\n// //  the rangeBar area  \n// rangeBar.addEventListener(\"mousedown\", (e) => {\n//     e.preventDefault();\n//     mousePosition = e.clientX;\n//     event_rangebar_updates(mousePosition);\n// }, false);\n\n// // If it is not a touch screen device,\n// //  when there is mouse movement inside\n// //  the navBar area it avoids the bar\n// //  to disappear\n// navBar.addEventListener(\"mousemove\", (e) => {\n//     e.preventDefault();\n//     if(!(window.matchMedia(\"(pointer: coarse)\").matches)) {\n//         if (rangeBarClicked) {\n//             mousePosition = e.clientX;\n//             event_rangebar_updates(mousePosition);\n//             changeNavBar = 1;\n//             autoscrollInnerCounting = 0;\n//         }\n//     }\n// }, false);\n\n// rangeBar.addEventListener(\"touchmove\", (e) => {\n//     e.preventDefault();\n//     rangeBarClicked = true;\n//     mousePosition = e.touches[0].clientX;\n//     if (rangeBarClicked) {\n//         event_rangebar_updates(mousePosition);\n//     }\n//     changeNavBar = 1;\n//     autoscrollInnerCounting = 0;\n// }, false);\n\n\n// // For touch screens, on movement stop the scroll and change playPause button\n// var lastTopPos = 0;\n// document.getElementsByTagName(\"body\")[0].addEventListener(\"touchmove\", (e) => {\n//     playButton.style.display = `inline-block`;\n//     pauseButton.style.display = 'none';\n//     scrollPage = false;\n//     playBtnClicked = false;\n//     changeNavBar = 1;\n// }, false);\n\n// // For mouse based screens, on movement stop the scroll and change playPause button\n// document.getElementsByTagName(\"body\")[0].addEventListener(\"wheel\", (e) => {\n//     pauseButton.style.display = 'none';\n//     playButton.style.display = `inline-block`;\n//     scrollPage = false;\n//     playBtnClicked = false;\n//     changeNavBar = 1;\n//     //playPause_clicked(navBar, scrollPage, playButton, pauseButton, pixelsToScroll);\n// }, false);\n\n// // For touch screens, on screen touch makes navBar appear\n// document.getElementsByTagName(\"body\")[0].addEventListener(\"touchstart\", (e) => {\n//     if (navBar.className === \"navBar\") {\n//         changeNavBar = 0;\n//         playBtnClicked = false;    \n//     }\n//     else {\n//         changeNavBar = 1;\n//         playBtnClicked = false;\n//     }\n// }, false);\n\n// // For mouse based screens, on mouse move makes navBar appear\n// document.getElementsByTagName(\"body\")[0].addEventListener(\"mousemove\", (e) => {\n//     e.preventDefault();\n//     if (navBar.className === \"navBar\") {\n//         changeNavBar = 0;\n//         autoscrollInnerCounting = 0;\n//     }\n//     else {\n//         changeNavBar = 1;\n//         autoscrollInnerCounting = 0;\n//     }\n// }, false);\n\n// // On page reload goes to beginning\n// // window.addEventListener(\"beforeunload\", (e) => {\n// //     e.preventDefault();\n// //     window.scroll(0, 0);\n// //     styledThumb.style.left = `0%`;\n// //     event_rangebar_updates(0);\n// // }, false);\n\n\n\n\n\n\n\n\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}